package nz.ac.aut.ense701.gui;

import java.awt.Color;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import nz.ac.aut.ense701.gameModel.Game;
import nz.ac.aut.ense701.gameModel.Player;
import nz.ac.aut.ense701.gameModel.Item;

public class InventoryPanel extends javax.swing.JPanel 
{
    /** 
     * Creates new GridSquarePanel.
     * @param player
     * @param row the row to represent
     * @param column the column to represent
     */
    public InventoryPanel(Game game, Player player,int row, int column)
    {
        this.player= player;
        this.row    = row;
        this.column = column;
        this.game=game;
          initComponents();
          mouselisten();
          
    }
public Item getitem()
{
    return item;
}
    /**
     * Updates the representation of the grid square panel.
     */
    public void update()
    {
        // get the GridSquare object from the world
       
       if(item==null)
       {
        jLabel2.setIcon(new ImageIcon("default.png"));
       }else{
    jLabel2.setIcon(new ImageIcon(makeColorTransparent.Maketrans(new ImageIcon(item.getStringRepresentation()).getImage())));
      jLabel2.setToolTipText(item.getDescription());
    }
     
    }
    public void dropitem()
    {
    if(player.drop(item))
    {
    item=null;
    update();
    }
    }
    public void additem(Item item)
    {
        this.item=item;
        update();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   public void mouselisten()
  {   jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                click(evt);
                
            }
            public Item getItems()
            {return item;
            }
        });
 }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblText = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jLabel1");

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setToolTipText("");
        setLayout(new java.awt.BorderLayout());

        lblText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblText.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblText.setCursor(new java.awt.Cursor(java.awt.Cursor.W_RESIZE_CURSOR));
        lblText.setOpaque(true);
        add(lblText, java.awt.BorderLayout.PAGE_START);

        jLayeredPane1.setToolTipText("");
        jLayeredPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLayeredPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.LOG_OPTION);
        jLayeredPane1.setDoubleBuffered(true);
        add(jLayeredPane1, java.awt.BorderLayout.PAGE_END);
        add(jLabel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
      
 public Item click(java.awt.event.MouseEvent evt) {                       
        // TODO add your handling code here:
        System.out.println(item);
       return item;
    }     
  public void clean()
 {
    
 item=null;
 update();
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblText;
    // End of variables declaration//GEN-END:variables
   
    private Item item=null;
    private int row, column;
    private Player player;
    private Game game;
    private static final Border normalBorder = new LineBorder(Color.BLACK, 1);
    private static final Border activeBorder = new LineBorder(Color.RED, 3);
}
